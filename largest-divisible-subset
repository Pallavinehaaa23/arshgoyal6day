class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& arr) {
        int n=arr.size();
        sort(arr.begin(),arr.end());
         vector<int> dp(n,1),ind(n,-1);
       
        int maxi=0,id=-1;
    
            
        
        for(int i=0;i<n;i++){
            ind[i]=i;
            for(int j=0;j<i;j++){
                if(arr[i]%arr[j]==0&& 1+dp[j]>dp[i]){
                dp[i]=1+dp[j];
                ind[i]=j;
                }
            }
        }
        for(int i=0;i<n;i++){
            if(dp[i]>maxi){
            maxi=dp[i];
            id=i;
            }
        }
         vector<int>ans;
        while(id!=ind[id]){
            ans.push_back(arr[id]);
            id=ind[id];
        }
        ans.push_back(arr[id]);
        reverse(ans.begin(),ans.end());
        return ans;
    }
};
